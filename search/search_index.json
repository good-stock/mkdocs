{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This is the documentation for the GoodStock</p>"},{"location":"#guides","title":"Guides","text":"<p>Here're guides for our GoodStock, feel free to have a look at it.</p>"},{"location":"#git-flow","title":"Git Flow","text":"<ul> <li>How to implement Git flow (Version 1)</li> <li>Setup unit test &amp; integration test on Github Action</li> </ul>"},{"location":"#digital-ocean-cluster","title":"Digital Ocean Cluster","text":"<ul> <li>How to set default context to connect to Digital Ocean Cluster</li> </ul>"},{"location":"#ambassador-gateway","title":"Ambassador Gateway","text":"<ul> <li>How to set up Ambassador Edge Stack &amp; TLS</li> </ul>"},{"location":"#kustomize","title":"Kustomize","text":"<ul> <li>How to use Kustomize to build separate environments</li> </ul>"},{"location":"do-ctx-management/","title":"How to set default context to connect Digitalocean cluster","text":""},{"location":"do-ctx-management/#install","title":"Install","text":"<p>install <code>doctl</code> by following commands <pre><code>    cd ~\n    wget https://github.com/digitalocean/doctl/releases/download/v1.94.0/doctl-1.94.0-linux-amd64.tar.gz\n    tar xf ~/doctl-1.94.0-linux-amd64.tar.gz\n    sudo mv ~/doctl /usr/local/bin\n</code></pre></p>"},{"location":"do-ctx-management/#create-an-api-token","title":"Create an API Token","text":"<ul> <li>go to digitalocean console</li> <li>go to API page</li> <li>click <code>Generate New Token</code></li> <li>enter token name</li> <li>don\u2019t forget to tick Write scope</li> <li>click <code>Generate Token</code></li> <li>enter this command <pre><code>   doctl auth init --context &lt;NAME&gt;\n</code></pre><ul> <li>specific Name to se for uaccess cluste</li> <li>enter the API token that generated above</li> </ul> </li> <li>switch to created context <pre><code>    doctl auth list\n    doctl auth switch --context &lt;NAME&gt;\n</code></pre></li> <li>use <code>doctl</code> to load the kube config file from our cluster by <pre><code>    doctl kubernetes cluster kubeconfig save use_your_cluster_name\n</code></pre> <p>cluster name can be found in digitalocean Kubernetes console and looking for the CLUSTER ID eg. 27fcf299-1242-402f-bb08-01f967a20b4</p> </li> <li>after downloaded the kube config file you can validate by<ul> <li>to see current context used <pre><code>    kubectl config current-context\n</code></pre></li> <li>to get list context <pre><code>    kubectl config get-contexts\n</code></pre></li> <li>to set default context <pre><code>    kubectl config use-context do-sfo2-example-cluster-01\n</code></pre></li> </ul> </li> </ul>"},{"location":"do-ctx-management/#references","title":"References","text":"<ul> <li>How to Install and Configure doctl | DigitalOcean Documentation</li> <li>How to Connect to a DigitalOcean Kubernetes Cluster | DigitalOcean Documentation</li> </ul>"},{"location":"git-flow/","title":"How to implement Git flow","text":""},{"location":"git-flow/#workflows-resuable","title":"Workflows (resuable)","text":"<p>\u0e40\u0e1b\u0e47\u0e19 workflow \u0e17\u0e35\u0e48\u0e08\u0e30\u0e40\u0e2d\u0e32\u0e44\u0e27\u0e49\u0e43\u0e0a\u0e49\u0e01\u0e31\u0e1a pipeline \u0e2b\u0e25\u0e31\u0e01\u0e2d\u0e35\u0e01\u0e17\u0e35\u0e1b\u0e23\u0e30\u0e01\u0e2d\u0e1a\u0e44\u0e1b\u0e14\u0e49\u0e27\u0e22  - <code>_docker.yaml</code> - \u0e40\u0e1b\u0e47\u0e19 workflow \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a build images \u0e41\u0e25\u0e30 push \u0e02\u0e36\u0e49\u0e19 docker hub registry</p> <ul> <li> <p><code>_deploy.yaml</code> - \u0e40\u0e1b\u0e47\u0e19 workflow \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a apply k8s config \u0e02\u0e2d\u0e07\u0e40\u0e23\u0e32\u0e02\u0e36\u0e49\u0e19 production cluster \u0e2b\u0e23\u0e37\u0e2d\u0e01\u0e47\u0e04\u0e37\u0e2d\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19 deploy \u0e19\u0e31\u0e48\u0e19\u0e41\u0e2b\u0e25\u0e30</p> </li> <li> <p><code>_testing.yaml</code> - \u0e40\u0e1b\u0e47\u0e19 workflow \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a run unit test \u0e41\u0e25\u0e30 integration test</p> </li> </ul> <p>\u0e08\u0e30\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e23\u0e32\u0e22\u0e25\u0e30\u0e40\u0e2d\u0e35\u0e22\u0e14\u0e43\u0e19 workflow \u0e42\u0e14\u0e22\u0e41\u0e1a\u0e48\u0e07 code \u0e22\u0e48\u0e2d\u0e22\u0e46 \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e40\u0e02\u0e49\u0e32\u0e43\u0e08\u0e40\u0e1b\u0e47\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e46  \u0e41\u0e25\u0e30\u0e08\u0e30\u0e21\u0e35 full version \u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07\u0e2d\u0e35\u0e01\u0e17\u0e35</p>"},{"location":"git-flow/#_dockeryaml","title":"<code>_docker.yaml</code>","text":"<ul> <li>\u0e40\u0e23\u0e34\u0e48\u0e21\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23 define \u0e27\u0e48\u0e32 workflow \u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19 reusable \u0e14\u0e49\u0e27\u0e22 keyword <code>workflow_call</code></li> <li>\u0e42\u0e14\u0e22\u0e08\u0e30\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e43\u0e2b\u0e49 workflow \u0e2b\u0e25\u0e31\u0e01\u0e17\u0e35\u0e48\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49\u0e2a\u0e48\u0e07 input \u0e41\u0e25\u0e30 secret \u0e40\u0e02\u0e49\u0e32\u0e21\u0e32\u0e15\u0e32\u0e21\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e23\u0e30\u0e1a\u0e38\u0e44\u0e27\u0e49\u0e16\u0e49\u0e32\u0e44\u0e21\u0e48\u0e2a\u0e48\u0e07\u0e21\u0e32\u0e08\u0e30\u0e1e\u0e31\u0e07</li> </ul> _docker.yaml<pre><code>on:\nworkflow_call:\ninputs:\npackages:\ndescription: Packages to build and publish\nrequired: true\ntype: string\nenvironment:\ndescription: Environment to build and publish e.g. prod, beta, dev\nrequired: true\ntype: string\nimage-prefix:\ndescription: Image prefix of the built image\ntype: string\npush:\ndescription: Enable pushing the image to the container registry\ntype: boolean\ndefault: true\nsecrets:\nDOCKER_HUB_USERNAME:\nrequired: true\nDOCKER_HUB_PASSWORD:\nrequired: true\n</code></pre> <ul> <li><code>inputs</code><ul> <li><code>packages</code> \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 input \u0e17\u0e35\u0e48\u0e1a\u0e2d\u0e01\u0e27\u0e48\u0e32\u0e21\u0e35 service \u0e44\u0e2b\u0e19\u0e17\u0e35\u0e48\u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07 build &amp; push \u0e43\u0e2b\u0e21\u0e48\u0e1a\u0e49\u0e32\u0e07 <pre><code>[\n{\n\"name\": \"order-service\",\n\"ref\": \"refs/tags/order-service@0.0.3-beta.0\",\n\"imageTag\": \"0.0.3-beta.0\"\n},\n{\n\"name\": \"tenant-service\",\n\"ref\": \"refs/tags/tenant-service@0.1.1-beta.0\",\n\"imageTag\": \"0.1.1-beta.0\"\n}\n]\n</code></pre></li> <li><code>environment</code> \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 input \u0e17\u0e35\u0e48\u0e1a\u0e2d\u0e01 target environment \u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23 build \u0e41\u0e25\u0e30 push image \u0e42\u0e14\u0e22\u0e43\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e21\u0e35 2 environments \u0e04\u0e37\u0e2d beta \u0e41\u0e25\u0e30 prod</li> <li><code>image-prefix</code> \u0e01\u0e47\u0e15\u0e23\u0e07\u0e15\u0e31\u0e27\u0e43\u0e2b\u0e49\u0e2a\u0e48\u0e07 image prefix \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e21\u0e32\u0e43\u0e0a\u0e49\u0e15\u0e48\u0e2d string \u0e01\u0e31\u0e1a image tag \u0e40\u0e1e\u0e37\u0e48\u0e2d push \u0e02\u0e36\u0e49\u0e19 registry \u0e40\u0e23\u0e32\u0e43\u0e0a\u0e49 docker hub \u0e15\u0e31\u0e27 image prefix \u0e04\u0e37\u0e2d <code>goodstockdev</code></li> <li><code>push</code> \u0e40\u0e1b\u0e47\u0e19 flag \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a\u0e43\u0e0a\u0e49\u0e43\u0e19 action push image \u0e02\u0e36\u0e49\u0e19 registry \u0e0b\u0e36\u0e48\u0e07 default \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 <code>true</code></li> </ul> </li> <li><code>secrets</code><ul> <li>\u0e43\u0e19 workflow \u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19 reusable workflow \u0e08\u0e30\u0e44\u0e21\u0e48\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e23\u0e35\u0e22\u0e01 ${{secret.something}} \u0e15\u0e23\u0e07\u0e46\u0e41\u0e1a\u0e1a\u0e19\u0e35\u0e49\u0e44\u0e14\u0e49 \u0e2b\u0e23\u0e37\u0e2d \u0e2d\u0e32\u0e08\u0e08\u0e30\u0e44\u0e14\u0e49\u0e41\u0e15\u0e48\u0e40\u0e17\u0e48\u0e32\u0e17\u0e35\u0e48\u0e25\u0e2d\u0e07\u0e21\u0e31\u0e19\u0e08\u0e30\u0e2b\u0e32\u0e44\u0e21\u0e48\u0e40\u0e08\u0e2d \u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e15\u0e49\u0e2d\u0e07 pass \u0e21\u0e32\u0e43\u0e2b\u0e49\u0e08\u0e32\u0e01 parent workflow \u0e17\u0e35\u0e48\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49\u0e2d\u0e35\u0e01\u0e17\u0e35 <pre><code>    on:\nworkflow_call:\ninputs:\npackages:\ndescription: Packages to build and publish\nrequired: true\ntype: string\nenvironment:\ndescription: Environment to build and publish e.g. prod, beta, dev\nrequired: true\ntype: string\nimage-prefix:\ndescription: Image prefix of the built image\ntype: string\npush:\ndescription: Enable pushing the image to the container registry\ntype: boolean\ndefault: true\nsecrets:\nDOCKER_HUB_USERNAME:\nrequired: true\nDOCKER_HUB_PASSWORD:\nrequired: true\n</code></pre></li> <li>\u0e15\u0e48\u0e2d\u0e44\u0e1b\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27 jobs \u0e02\u0e2d\u0e07 workflow \u0e19\u0e35\u0e49 \u0e08\u0e30\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e40\u0e09\u0e1e\u0e32\u0e30 step \u0e17\u0e35\u0e48\u0e14\u0e39\u0e0b\u0e31\u0e1a\u0e0b\u0e49\u0e2d\u0e19\u0e41\u0e25\u0e30\u0e19\u0e48\u0e32 concern</li> <li>\u0e15\u0e23\u0e07\u0e19\u0e35\u0e49\u0e08\u0e30\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16 run job \u0e41\u0e1a\u0e1a parallel \u0e44\u0e14\u0e49 \u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e21\u0e35 2 services \u0e08\u0e32\u0e01 input \u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19\u0e17\u0e35\u0e48\u0e2a\u0e48\u0e07\u0e40\u0e02\u0e49\u0e32\u0e21\u0e32\u0e41\u0e25\u0e49\u0e27\u0e40\u0e23\u0e32\u0e43\u0e0a\u0e49 <code>fromJson</code> \u0e40\u0e1b\u0e47\u0e19\u0e15\u0e31\u0e27 convert \u0e43\u0e2b\u0e49\u0e40\u0e1b\u0e47\u0e19 <code>json</code> \u0e2d\u0e35\u0e01\u0e17\u0e35 \u0e0b\u0e36\u0e48\u0e07 step \u0e19\u0e35\u0e49\u0e08\u0e30\u0e17\u0e33\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16 run job \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 \u0e2a\u0e33\u0e2b\u0e23\u0e31\u0e1a 2 services \u0e44\u0e14\u0e49\u0e40\u0e25\u0e22 <pre><code>    strategy:\nmatrix:\npackages: ${{ fromJson(inputs.packages) }}\n</code></pre></li> <li>\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e1b\u0e23\u0e30\u0e01\u0e32\u0e28\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49 workflow \u0e19\u0e35\u0e49\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e2a\u0e48\u0e07 output \u0e2d\u0e2d\u0e01\u0e44\u0e1b\u0e43\u0e2b\u0e49 workflow \u0e17\u0e35\u0e48\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49\u0e21\u0e31\u0e19\u0e2d\u0e35\u0e01\u0e17\u0e35\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e44\u0e1b\u0e14\u0e33\u0e40\u0e19\u0e34\u0e19\u0e01\u0e32\u0e23\u0e15\u0e48\u0e2d <pre><code>    outputs:\nDOCKERFILE_EXISTS: ${{ steps.check-dockerfile.outputs.DOCKERFILE_EXISTS }}\n</code></pre></li> <li>\u0e15\u0e23\u0e07\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19 logic \u0e43\u0e19\u0e01\u0e32\u0e23\u0e40\u0e0a\u0e47\u0e04\u0e27\u0e48\u0e32 services \u0e17\u0e35\u0e48\u0e2a\u0e48\u0e07\u0e40\u0e02\u0e49\u0e32\u0e21\u0e32\u0e21\u0e35 <code>Dockerfile</code> \u0e43\u0e2b\u0e49 build \u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e1b\u0e25\u0e48\u0e32 \u0e41\u0e25\u0e30\u0e08\u0e30\u0e2a\u0e48\u0e07 boolean \u0e40\u0e02\u0e49\u0e32 github output \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23 set output \u0e43\u0e2b\u0e49\u0e01\u0e31\u0e1a step \u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19\u0e14\u0e49\u0e27\u0e22 <pre><code>    - name: Check if Dockerfile exists\nid: check-dockerfile\nrun: |\nif [ ! -f apps/${{ matrix.packages.name }}/Dockerfile ]; then\necho \"Dockerfile does not exist\"\necho \"DOCKERFILE_EXISTS=false\" &gt;&gt; $GITHUB_OUTPUT\nelse\necho \"Dockerfile exists\"\necho \"DOCKERFILE_EXISTS=true\" &gt;&gt; $GITHUB_OUTPUT\nfi\n</code></pre> Full code version <pre><code>name: _docker\non:\nworkflow_call:\ninputs:\npackages:\ndescription: Packages to build and publish\nrequired: true\ntype: string\nenvironment:\ndescription: Environment to build and publish e.g. prod, beta, dev\nrequired: true\ntype: string\nimage-prefix:\ndescription: Image prefix of the built image\ntype: string\npush:\ndescription: Enable pushing the image to the container registry\ntype: boolean\ndefault: true\nsecrets:\nDOCKER_HUB_USERNAME:\nrequired: true\nDOCKER_HUB_PASSWORD:\nrequired: true\njobs:\nbuild-and-publish-docker-image:\nname: Build and Publish Docker image\nruns-on: ubuntu-latest\nstrategy:\nmatrix:\npackages: ${{ fromJson(inputs.packages) }}\noutputs:\nDOCKERFILE_EXISTS: ${{ steps.check-dockerfile.outputs.DOCKERFILE_EXISTS }}\nsteps:\n- name: Checkout with tags\nuses: actions/checkout@v3\nwith:\nfetch-depth: 0\nref: ${{ matrix.packages.ref }}\n- name: Check if Dockerfile exists\nid: check-dockerfile\nrun: |\nif [ ! -f apps/${{ matrix.packages.name }}/Dockerfile ]; then\necho \"Dockerfile does not exist\"\necho \"DOCKERFILE_EXISTS=false\" &gt;&gt; $GITHUB_OUTPUT\nelse\necho \"Dockerfile exists\"\necho \"DOCKERFILE_EXISTS=true\" &gt;&gt; $GITHUB_OUTPUT\nfi\n- name: Set up Docker Buildx\nif: steps.check-dockerfile.outputs.DOCKERFILE_EXISTS == 'true'\nuses: docker/setup-buildx-action@v2\n- name: Login to Docker hub\nif: steps.check-dockerfile.outputs.DOCKERFILE_EXISTS == 'true'\nuses: docker/login-action@v1\nwith:\nusername: ${{ secrets.DOCKER_HUB_USERNAME }}\npassword: ${{ secrets.DOCKER_HUB_PASSWORD }}\n- name: Build and push Docker image\nif: steps.check-dockerfile.outputs.DOCKERFILE_EXISTS == 'true'\nuses: docker/build-push-action@v3\nwith:\ncontext: .\nfile: apps/${{ matrix.packages.name }}/Dockerfile\ntags: ${{ inputs.image-prefix }}/${{ matrix.packages.name }}:${{ matrix.packages.imageTag }}\npush: ${{ inputs.push }}\n</code></pre></li> </ul> </li> </ul>"},{"location":"git-flow/#_deployyaml","title":"<code>_deploy.yaml</code>","text":"<ul> <li>\u0e43\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e19\u0e35\u0e49\u0e01\u0e47\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e01\u0e31\u0e1a\u0e17\u0e35\u0e48\u0e2d\u0e18\u0e34\u0e1a\u0e32\u0e22\u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19\u0e40\u0e25\u0e22\u0e44\u0e21\u0e48\u0e15\u0e48\u0e32\u0e07\u0e01\u0e31\u0e19 \u0e02\u0e2d\u0e02\u0e49\u0e32\u0e21 step \u0e19\u0e35\u0e49\u0e44\u0e1b <pre><code>    on:\nworkflow_call:\ninputs:\npackages:\ndescription: \"Packages to update\"\nrequired: true\ntype: string\nenvironment:\ndescription: \"Environment e.g. beta, prod, main used to define path to kustomize overlay\"\nrequired: true\ntype: string\nimage-prefix:\ndescription: \"Prefix of image e.g. goodstockdev\"\nrequired: true\ntype: string\ncluster-name:\ndescription: \"Your cluster name\"\nrequired: true\ntype: string\nsecrets:\nDIGITALOCEAN_ACCESS_TOKEN:\nrequired: true\n</code></pre></li> <li>workflow \u0e19\u0e35\u0e49\u0e08\u0e30\u0e43\u0e0a\u0e49 <code>kustomize</code> \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e04\u0e23\u0e37\u0e48\u0e2d\u0e07\u0e21\u0e37\u0e2d\u0e43\u0e19\u0e01\u0e32\u0e23\u0e0a\u0e48\u0e27\u0e22\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 config k8s \u0e0b\u0e36\u0e48\u0e07 step \u0e19\u0e35\u0e49\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49 action <code>kustomize</code> <pre><code>    - name: Setup Kustomize\nuses: multani/action-setup-kustomize@v1\nwith:\nversion: 5.0.0\n</code></pre></li> <li> <p>step \u0e19\u0e35\u0e49\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23 for loop \u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 packages <pre><code>    [\n{\n\"name\": \"order-service\",\n\"ref\": \"refs/tags/order-service@0.0.3-beta.0\",\n\"imageTag\": \"0.0.3-beta.0\"\n},\n{\n\"name\": \"tenant-service\",\n\"ref\": \"refs/tags/tenant-service@0.1.1-beta.0\",\n\"imageTag\": \"0.1.1-beta.0\"\n}\n]\n</code></pre> <pre><code>for row in $(echo \"$PACKAGES\" | jq -r '.[] | @base64')\n</code></pre></p> <ul> <li>\u0e42\u0e14\u0e22 \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 <code>jq</code> \u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e43\u0e19\u0e01\u0e32\u0e23\u0e08\u0e31\u0e14\u0e01\u0e32\u0e23 <code>json</code> \u0e42\u0e14\u0e22\u0e40\u0e09\u0e1e\u0e32\u0e30</li> <li>\u0e0b\u0e36\u0e48\u0e07 <code>-r</code> \u0e08\u0e30\u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07 raw output  \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e15\u0e31\u0e14\u0e1e\u0e27\u0e01 single quote, double quote, \u0e2b\u0e23\u0e37\u0e2d \u0e1e\u0e27\u0e01 special character</li> <li><code>'.[] | @base64'</code> \u0e2d\u0e31\u0e19\u0e19\u0e35\u0e49\u0e2b\u0e21\u0e32\u0e22\u0e16\u0e36\u0e07 map \u0e17\u0e38\u0e01\u0e15\u0e31\u0e27\u0e43\u0e19 array \u0e41\u0e25\u0e30 \u0e40\u0e02\u0e49\u0e32\u0e23\u0e2b\u0e31\u0e2a <code>base64</code></li> </ul> <p><pre><code>_jq() {\n    echo ${row} | base64 --decode | jq -r ${1}\n}\n</code></pre> - \u0e41\u0e25\u0e30\u0e21\u0e35\u0e01\u0e32\u0e23\u0e2a\u0e23\u0e49\u0e32\u0e07 function <code>_jq()</code> \u0e44\u0e27\u0e49\u0e40\u0e1e\u0e37\u0e48\u0e2d decode \u0e01\u0e25\u0e31\u0e1a\u0e21\u0e32\u0e40\u0e1b\u0e47\u0e19 json \u0e23\u0e39\u0e1b\u0e41\u0e1a\u0e1a\u0e1b\u0e01\u0e15\u0e34 - \u0e43\u0e19 loop \u0e01\u0e47\u0e08\u0e30\u0e40\u0e02\u0e49\u0e32\u0e16\u0e36\u0e07 property object \u0e44\u0e14\u0e49\u0e1c\u0e48\u0e32\u0e19\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01 function \u0e40\u0e0a\u0e48\u0e19 <code>$(_jq '.name')</code> \u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01 property name</p> <ul> <li><code>bash -c \"cd $KUSTOMIZE_PATH &amp;&amp; kustomize edit set image $NAME=$PREFIX/$NAME:$IMAGE_TAG\"</code><ul> <li><code>-c</code> \u0e2d\u0e31\u0e19\u0e19\u0e35\u0e49\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07\u0e02\u0e2d\u0e07 shell \u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16 execute command \u0e42\u0e14\u0e22\u0e44\u0e21\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e44\u0e1b\u0e2a\u0e23\u0e49\u0e32\u0e07 shell script</li> <li>\u0e43\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e49\u0e08\u0e30\u0e21\u0e35 2 \u0e04\u0e33\u0e2a\u0e31\u0e48\u0e07 \u0e04\u0e37\u0e2d <code>cd</code> \u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e17\u0e35\u0e48 <code>kustomize</code> overlay path \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21 edit</li> <li>\u0e2a\u0e31\u0e48\u0e07 <code>kustomize edit</code> \u0e15\u0e31\u0e27 image tag \u0e25\u0e48\u0e32\u0e2a\u0e38\u0e14\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21 apply <pre><code> env:\n    PACKAGES: ${{ inputs.packages }}\n</code></pre></li> <li>\u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e27\u0e48\u0e32\u0e43\u0e19 for loop \u0e08\u0e30\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e23\u0e35\u0e22\u0e01\u0e43\u0e0a\u0e49\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23 <code>$PACKAGES</code> \u0e40\u0e23\u0e32\u0e40\u0e25\u0e22\u0e15\u0e49\u0e2d\u0e07\u0e2a\u0e48\u0e07\u0e15\u0e31\u0e27\u0e41\u0e1b\u0e23\u0e19\u0e35\u0e49\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e1c\u0e48\u0e32\u0e19 github env <pre><code>- name: Update kustomize configuration\nrun: |\n    for row in $(echo \"$PACKAGES\" | jq -r '.[] | @base64'); do\n    _jq() {\n        echo ${row} | base64 --decode | jq -r ${1}\n    }\n    NAME=$(_jq '.name')\n    IMAGE_TAG=$(_jq '.imageTag')\n    PREFIX=${{ inputs.image-prefix }}\n    KUSTOMIZE_PATH=k8s/$NAME/overlays/${{ inputs.environment }}\n    [ -d \"$KUSTOMIZE_PATH\" ] &amp;&amp; bash -c \"cd $KUSTOMIZE_PATH &amp;&amp; kustomize edit set image $NAME=$PREFIX/$NAME:$IMAGE_TAG\"\n    echo \"${NAME}:${IMAGE_TAG} is updated\"\n    done\nenv:\n    PACKAGES: ${{ inputs.packages }}\n</code></pre></li> <li>\u0e15\u0e48\u0e2d\u0e44\u0e1b\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19 step \u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23 commit \u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e16\u0e39\u0e01 kustomize edit \u0e08\u0e32\u0e01 step \u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19\u0e41\u0e01\u0e49\u0e44\u0e02 image tag \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e43\u0e2b\u0e49\u0e15\u0e23\u0e07\u0e01\u0e31\u0e1a concept git ops \u0e40\u0e23\u0e32\u0e04\u0e27\u0e23 track \u0e01\u0e32\u0e23\u0e40\u0e1b\u0e25\u0e35\u0e48\u0e22\u0e19\u0e41\u0e1b\u0e25\u0e07\u0e02\u0e2d\u0e07\u0e44\u0e1f\u0e25\u0e4c\u0e43\u0e2b\u0e49\u0e44\u0e14\u0e49\u0e21\u0e32\u0e01\u0e17\u0e35\u0e48\u0e2a\u0e38\u0e14 step \u0e19\u0e35\u0e49\u0e08\u0e36\u0e07\u0e08\u0e30 commit \u0e44\u0e1f\u0e25\u0e4c\u0e17\u0e35\u0e48\u0e16\u0e39\u0e01\u0e41\u0e01\u0e49\u0e44\u0e02\u0e02\u0e36\u0e49\u0e19 git \u0e1b\u0e01\u0e15\u0e34    <pre><code> - name: Commit image tag changes\n uses: EndBug/add-and-commit@v7\n with:\n   add: .\n   message: \"Update kustomize image latest tag\"\n</code></pre></li> </ul> </li> <li>\u0e40\u0e14\u0e35\u0e4b\u0e22\u0e27\u0e40\u0e23\u0e32\u0e08\u0e30\u0e15\u0e49\u0e2d\u0e07 login cluster \u0e1a\u0e19 digitalocean \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e17\u0e33\u0e01\u0e32\u0e23 apply config \u0e43\u0e19 step \u0e15\u0e48\u0e2d\u0e44\u0e1b \u0e0b\u0e36\u0e48\u0e07 step \u0e19\u0e35\u0e49\u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e15\u0e49\u0e2d\u0e07 install <code>doctl</code> \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19 tool \u0e17\u0e35\u0e48\u0e0a\u0e48\u0e27\u0e22\u0e43\u0e2b\u0e49\u0e40\u0e23\u0e32\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16 download context config \u0e2b\u0e23\u0e37\u0e2d\u0e27\u0e48\u0e32 login \u0e40\u0e02\u0e49\u0e32 cluster \u0e19\u0e31\u0e48\u0e19\u0e41\u0e2b\u0e25\u0e30    <pre><code>  - name: Install doctl\n uses: digitalocean/action-doctl@v2\n with:\n   token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}\n</code></pre></li> <li>step \u0e19\u0e35\u0e49\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23 download context \u0e21\u0e32\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21 apply config \u0e43\u0e19\u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e16\u0e31\u0e14\u0e44\u0e1b    <pre><code> - name: Save DigitalOcean kubeconfig with short-lived credentials\n run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{inputs.cluster-name}} \n</code></pre></li> <li>step \u0e2a\u0e38\u0e14\u0e17\u0e49\u0e32\u0e22\u0e04\u0e37\u0e2d\u0e01\u0e32\u0e23 apply config \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e40\u0e1e\u0e34\u0e48\u0e07\u0e41\u0e01\u0e49\u0e44\u0e02 image tag \u0e1c\u0e48\u0e32\u0e19 kustomize edit \u0e42\u0e14\u0e22\u0e40\u0e23\u0e32\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23 for loop \u0e04\u0e25\u0e49\u0e32\u0e22\u0e46 \u0e01\u0e31\u0e1a step \u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e44\u0e25\u0e48 apply config \u0e43\u0e2b\u0e49\u0e04\u0e23\u0e1a\u0e17\u0e38\u0e01 service \u0e17\u0e35\u0e48\u0e2a\u0e48\u0e07\u0e1c\u0e48\u0e32\u0e19 input \u0e21\u0e32</li> <li>\u0e42\u0e14\u0e22 logic \u0e43\u0e19 step \u0e19\u0e35\u0e49\u0e08\u0e30\u0e40\u0e2b\u0e21\u0e37\u0e2d\u0e19\u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19\u0e40\u0e25\u0e22 \u0e21\u0e35\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e41\u0e04\u0e48 command \u0e17\u0e35\u0e48\u0e43\u0e0a\u0e49\u0e43\u0e19\u0e01\u0e32\u0e23 apply config \u0e14\u0e31\u0e07\u0e19\u0e35\u0e49 <code>kustomize build ${{ inputs.environment }} | kubectl apply -f -</code> <pre><code> - name: Deploy to DigitalOcean Kubernetes cluster\n run: |\n   for row in $(echo \"$PACKAGES\" | jq -r '.[] | @base64'); do\n     _jq() {\n       echo ${row} | base64 --decode | jq -r ${1}\n     }\n     NAME=$(_jq '.name')\n     KUSTOMIZE_PATH=k8s/$NAME/overlays\n     bash -c \"cd $KUSTOMIZE_PATH &amp;&amp; kustomize build ${{ inputs.environment }} | kubectl apply -f -\"\n   done\n env:\n   PACKAGES: ${{ inputs.packages }}\n</code></pre></li> </ul> <p>Full Code Version <pre><code> name: _deploy\non:\nworkflow_call:\ninputs:\npackages:\ndescription: \"Packages to update\"\nrequired: true\ntype: string\nenvironment:\ndescription: \"Environment e.g. beta, prod, main used to define path to kustomize overlay\"\nrequired: true\ntype: string\nimage-prefix:\ndescription: \"Prefix of image e.g. goodstockdev\"\nrequired: true\ntype: string\ncluster-name:\ndescription: \"Your cluster name\"\nrequired: true\ntype: string\nsecrets:\nDIGITALOCEAN_ACCESS_TOKEN:\nrequired: true\njobs:\ndeploy:\nname: Deploy to production\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout Repo\nuses: actions/checkout@v3\n- name: Setup Kustomize\nuses: multani/action-setup-kustomize@v1\nwith:\nversion: 5.0.0\n- name: Update kustomize configuration\nrun: |\nfor row in $(echo \"$PACKAGES\" | jq -r '.[] | @base64'); do\n_jq() {\necho ${row} | base64 --decode | jq -r ${1}\n}\nNAME=$(_jq '.name')\nIMAGE_TAG=$(_jq '.imageTag')\nPREFIX=${{ inputs.image-prefix }}\nKUSTOMIZE_PATH=k8s/$NAME/overlays/${{ inputs.environment }}\n[ -d \"$KUSTOMIZE_PATH\" ] &amp;&amp; bash -c \"cd $KUSTOMIZE_PATH &amp;&amp; kustomize edit set image $NAME=$PREFIX/$NAME:$IMAGE_TAG\"\necho \"${NAME}:${IMAGE_TAG} is updated\"\ndone\nenv:\nPACKAGES: ${{ inputs.packages }}\n- name: Commit image tag changes\nuses: EndBug/add-and-commit@v7\nwith:\nadd: .\nmessage: \"Update kustomize image latest tag\"\n- name: Install doctl\nuses: digitalocean/action-doctl@v2\nwith:\ntoken: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}\n- name: Save DigitalOcean kubeconfig with short-lived credentials\nrun: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{inputs.cluster-name}}\n- name: Deploy to DigitalOcean Kubernetes cluster\nrun: |\nfor row in $(echo \"$PACKAGES\" | jq -r '.[] | @base64'); do\n_jq() {\necho ${row} | base64 --decode | jq -r ${1}\n}\nNAME=$(_jq '.name')\nKUSTOMIZE_PATH=k8s/$NAME/overlays\nbash -c \"cd $KUSTOMIZE_PATH &amp;&amp; kustomize build ${{ inputs.environment }} | kubectl apply -f -\"\ndone\nenv:\nPACKAGES: ${{ inputs.packages }}\n</code></pre></p> </li> </ul> <p>Full Code Version <pre><code>name: \"_testing\"\non:\nworkflow_call:\nsecrets:\nORDER_SERVICE_TEST_ENV:\nrequired: true\nTENANT_SERVICE_TEST_ENV:\nrequired: true\njobs:\nunit_tests:\nname: Run unit tests\nstrategy:\nmatrix:\nnode-version: [18]\nos: [ubuntu-latest]\nruns-on: ${{ matrix.os }}\nsteps:\n- name: Checkout Repo\nuses: actions/checkout@v2\nwith:\n# related to issue, https://github.com/changesets/action/issues/201\nfetch-depth: 0\n- name: Setup Node.js\nuses: actions/setup-node@v3\nwith:\nnode-version: 18\n- name: Inject .env file from secret\nrun: |\necho \"${{ secrets.ORDER_SERVICE_TEST_ENV }}\" &gt; ./apps/order-service/.env.dev\necho \"${{ secrets.TENANT_SERVICE_TEST_ENV }}\" &gt; ./apps/tenant-service/.env.dev\n- name: Install turbo\nrun: npm install --global turbo\n- name: Run npm install packages\nrun: npm install\n- name: Run unit tests\nrun: npm run test:unit\nintegration_tests:\nname: Run integration tests\nneeds: unit_tests\nstrategy:\nmatrix:\nnode-version: [18]\nos: [ubuntu-latest]\nruns-on: ${{ matrix.os }}\nsteps:\n- name: Checkout Repo\nuses: actions/checkout@v3\nwith:\nfetch-depth: 0\n- name: Setup Node.js\nuses: actions/setup-node@v3\nwith:\nnode-version: ${{ matrix.node-version }}\n- name: Inject .env file from secret\nrun: |\necho \"${{ secrets.ORDER_SERVICE_TEST_ENV }}\" &gt; ./apps/order-service/.env.dev\necho \"${{ secrets.TENANT_SERVICE_TEST_ENV }}\" &gt; ./apps/tenant-service/.env.dev\n- name: Start Docker-Compose\nrun: docker-compose up -d\n- name: Wait for tenant-service to be ready\nrun: |\nwhile ! nc -z localhost 3002; do\nsleep 1\ndone\n- name: Wait for order-service to be ready\nrun: |\nwhile ! nc -z localhost 3001; do\nsleep 1\ndone\n- name: Run seed db\nrun: |\ndocker-compose exec -T tenant-service npm run seed:db:test\n- name: Run Integration Tests for tenant-service\nrun: docker-compose exec -T tenant-service npm run test:integration\n- name: Run Integration Tests for order-service\nrun: docker-compose exec -T order-service npm run test:integration\n</code></pre></p>"},{"location":"git-flow/#_testingyaml","title":"<code>_testing.yaml</code>","text":"<p>workflow \u0e19\u0e35\u0e49\u0e2b\u0e25\u0e31\u0e01\u0e46\u0e21\u0e35 2 jobs \u0e04\u0e37\u0e2d </p>"},{"location":"git-flow/#unit_tests","title":"<code>unit_tests</code>","text":"<p>\u0e40\u0e23\u0e34\u0e48\u0e21\u0e08\u0e32\u0e01\u0e32\u0e23\u0e23\u0e30\u0e1a\u0e38\u0e15\u0e31\u0e27 version <code>node</code> \u0e41\u0e25\u0e30 <code>os</code> \u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e08\u0e30\u0e43\u0e0a\u0e49 run workflow \u0e19\u0e35\u0e49 \u0e01\u0e32\u0e23\u0e23\u0e30\u0e1a\u0e38 strategy \u0e15\u0e23\u0e07\u0e19\u0e35\u0e49\u0e08\u0e30\u0e17\u0e33\u0e43\u0e2b\u0e49 test \u0e40\u0e23\u0e32\u0e44\u0e21\u0e48\u0e1e\u0e31\u0e07\u0e40\u0e1e\u0e23\u0e32\u0e30 workflow \u0e44\u0e1b\u0e43\u0e0a\u0e49 version \u0e2d\u0e37\u0e48\u0e19 <pre><code>    strategy:\nmatrix:\nnode-version: [18]\nos: [ubuntu-latest]\nruns-on: ${{ matrix.os }}\n</code></pre> \u0e15\u0e23\u0e07\u0e19\u0e35\u0e49\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23 inject <code>.env</code> \u0e44\u0e1f\u0e25\u0e4c \u0e17\u0e31\u0e49\u0e07\u0e44\u0e1f\u0e25\u0e4c \u0e22\u0e49\u0e33\u0e27\u0e48\u0e32 \u0e17\u0e31\u0e49\u0e07\u0e44\u0e1f\u0e25\u0e4c \u0e42\u0e14\u0e22\u0e40\u0e23\u0e32\u0e08\u0e30\u0e40\u0e01\u0e47\u0e1a env \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e40\u0e02\u0e49\u0e32\u0e44\u0e1b\u0e43\u0e19 secret \u0e17\u0e35\u0e48\u0e40\u0e2b\u0e47\u0e19\u0e43\u0e19 code \u0e14\u0e49\u0e32\u0e19\u0e25\u0e48\u0e32\u0e07 \u0e15\u0e31\u0e27\u0e2d\u0e22\u0e48\u0e32\u0e07 <code>secret.ORDER_SERVICE_TEST_ENV</code> \u0e0b\u0e36\u0e48\u0e07\u0e15\u0e23\u0e07\u0e19\u0e35\u0e49\u0e2d\u0e32\u0e08\u0e08\u0e30\u0e22\u0e31\u0e07\u0e44\u0e21\u0e48\u0e04\u0e48\u0e2d\u0e22\u0e14\u0e35\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e08\u0e30 debug \u0e22\u0e32\u0e01\u0e43\u0e19\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e15\u0e49\u0e2d\u0e07\u0e01\u0e32\u0e23 re-check \u0e2d\u0e32\u0e08\u0e08\u0e30\u0e25\u0e2d\u0e07\u0e1e\u0e34\u0e08\u0e32\u0e23\u0e13\u0e32\u0e1e\u0e27\u0e01 external 3rd party \u0e17\u0e35\u0e48\u0e0a\u0e48\u0e27\u0e22\u0e43\u0e19\u0e01\u0e32\u0e23 manage env \u0e2d\u0e35\u0e01\u0e17\u0e35 <pre><code>     - name: Inject .env file from secret\nrun: |\necho \"${{ secrets.ORDER_SERVICE_TEST_ENV }}\" &gt; ./apps/order-service/.env.dev\necho \"${{ secrets.TENANT_SERVICE_TEST_ENV }}\" &gt; ./apps/tenant-service/.env.dev\n</code></pre> \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01 project \u0e40\u0e23\u0e32\u0e40\u0e1b\u0e47\u0e19 <code>monorepos</code> \u0e41\u0e25\u0e30\u0e43\u0e0a\u0e49 <code>turborepo</code> \u0e43\u0e19\u0e01\u0e32\u0e23 manage workspace \u0e40\u0e23\u0e32\u0e08\u0e36\u0e07\u0e15\u0e49\u0e2d\u0e07\u0e25\u0e07 cli \u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21 run task \u0e43\u0e19 step \u0e16\u0e31\u0e14\u0e44\u0e1b <pre><code>    - name: Install turbo\nrun: pnpm install --global turbo\n</code></pre> \u0e02\u0e31\u0e49\u0e19\u0e15\u0e2d\u0e19\u0e19\u0e35\u0e49\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23 run parallel command \u0e1c\u0e48\u0e32\u0e19 <code>turborepo</code> task \u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e40\u0e0a\u0e47\u0e04\u0e44\u0e14\u0e49\u0e17\u0e35\u0e48\u0e44\u0e1f\u0e25\u0e4c <code>.turbo.json</code> \u0e41\u0e25\u0e30\u0e14\u0e38\u0e17\u0e35\u0e48 <code>package.json</code> \u0e17\u0e35\u0e48 root directory \u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e27\u0e48\u0e32\u0e21\u0e35\u0e01\u0e32\u0e23 define task test:unit \u0e44\u0e27\u0e49\u0e2a\u0e2d\u0e14\u0e04\u0e25\u0e49\u0e2d\u0e07\u0e01\u0e31\u0e19 <pre><code>    - name: Run unit tests\nrun: npm run test:unit\n</code></pre></p>"},{"location":"git-flow/#integration_tests","title":"<code>integration_tests</code>","text":"<p>job \u0e02\u0e2d\u0e07 integration test \u0e08\u0e30\u0e41\u0e15\u0e01\u0e15\u0e48\u0e32\u0e07\u0e01\u0e31\u0e1a unit test \u0e15\u0e23\u0e07\u0e08\u0e30\u0e21\u0e35 spin off database \u0e1c\u0e48\u0e32\u0e19 docker compose \u0e41\u0e25\u0e30 run test \u0e1c\u0e48\u0e32\u0e19 docker compose \u0e40\u0e0a\u0e48\u0e19\u0e01\u0e31\u0e19 \u0e42\u0e14\u0e22 job \u0e19\u0e35\u0e49\u0e08\u0e30\u0e17\u0e33\u0e01\u0e32\u0e23 up containers \u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14\u0e17\u0e35\u0e48\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e02\u0e49\u0e2d\u0e07\u0e40\u0e15\u0e23\u0e35\u0e22\u0e21\u0e44\u0e27\u0e49\u0e43\u0e19 step \u0e16\u0e31\u0e14\u0e44\u0e1b <pre><code> - name: Start Docker-Compose\nrun: docker-compose up -d\n</code></pre> step \u0e19\u0e35\u0e49\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23\u0e23\u0e2d\u0e08\u0e19\u0e01\u0e27\u0e48\u0e32 containers <code>backend</code> \u0e14\u0e49\u0e32\u0e19\u0e1a\u0e19\u0e08\u0e30 up \u0e40\u0e2a\u0e23\u0e47\u0e08 <pre><code>- name: Wait for tenant-service to be ready\nrun: |\nwhile ! nc -z localhost 3002; do\nsleep 1\ndone\n- name: Wait for order-service to be ready\nrun: |\nwhile ! nc -z localhost 3001; do\nsleep 1\ndone\n</code></pre> step \u0e16\u0e31\u0e14\u0e44\u0e1b\u0e01\u0e47\u0e08\u0e30\u0e40\u0e1b\u0e47\u0e19\u0e01\u0e32\u0e23 run seed database \u0e41\u0e25\u0e30 integration test \u0e15\u0e32\u0e21\u0e25\u0e33\u0e14\u0e31\u0e1a\u0e15\u0e48\u0e2d\u0e44\u0e1b</p>"},{"location":"git-flow/#references","title":"References","text":"<ul> <li>GitHub - julie-ng/cloud-architecture-review: Cloud Architecture Review App</li> <li>GitHub - saenyakorn/monorepo-versioning-gitops: Versioning workflows on Monorepo and deploy the services with GitOps concept</li> <li>GitHub - thinc-org/thinc-gitops-example at part-3</li> <li>GitHub - thinc-org/cugetreg: A course registration planning application for CU students</li> </ul>"},{"location":"git-flow/#setup-unit-test-integration-test-on-github-action","title":"Setup unit test &amp; integration test on Github Action","text":"<ol> <li>use suffix for separating unit test &amp; integration test by unit test<pre><code>name-of-test.unit.test\n</code></pre> integration test<pre><code>name-of-test.integration.test\n</code></pre></li> <li>implement running testing script in <code>package.json</code> file <pre><code>\"test:unit\": \"jest --testMatch='**/*.unit.test.ts' --bail\",\n\"test:integration\": \"jest --testMatch='**/*.integration.test.ts' --bail\"    </code></pre> <code>--bail</code> will be used on the Github Action pipeline to tell the pipeline that test failed.</li> <li>create the test pipeline on Github Action. Note we will use docker-compose file to run the db and backend in the pipeline. <pre><code>version: '3.7'\nservices:\nbackend:\ncontainer_name: backend\nbuild: .\nvolumes:\n- ./src:/usr/src/app/src\n- ./test:/usr/src/app/test\n- /usr/src/app/node_modules\nports:\n- 3000:3000\nenv_file:\n- ./.env.dev\nnetworks:\n- web-network\ndepends_on:\n- mongodb\nmongodb:\nimage: mongo:latest\ncontainer_name: mongodb\nrestart: always\nports:\n- '27017:27017'\nvolumes:\n- mongodb_data:/data/db\nnetworks:\n- web-network\nnetworks:\nweb-network:\nvolumes:\nmongodb_data:\n</code></pre></li> <li>create Github Action file like below <pre><code># This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node\n# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs\nname: Tests Suite\non:\npush:\nbranches:\n- main\npull_request:\nbranches:\n- main\n- develop\njobs:\nunit_tests:\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout code\nuses: actions/checkout@v2\n- name: Set up Node.js\nuses: actions/setup-node@v2\nwith:\nnode-version: 16.x\n- name: Inject .env file from secret\nrun: |\necho \"${{ secrets.ENV_FILE_CONTENTS }}\" &gt; .env.dev\n- name: Run npm install packages\nrun: npm install\n- name: Run unit tests\nrun: npm run test:unit\nintegration_tests:\nneeds: unit_tests\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout code\nuses: actions/checkout@v2\n- name: Set up Node.js\nuses: actions/setup-node@v2\nwith:\nnode-version: 16.x\n- name: Inject .env file from secret\nrun: |\necho \"${{ secrets.ENV_FILE_CONTENTS }}\" &gt; .env.dev\n- name: Start Docker-Compose\nrun: docker-compose up -d\n- name: Wait for backend service to be ready\nrun: docker-compose exec -T backend sh -c \"while ! nc -z localhost 3000; do sleep 1; done\"\n- name: Seed the test database\nrun: docker-compose exec -T backend npm run seed:db:test\n- name: Run tests\nrun: docker-compose exec -T backend npm run test:integration\n</code></pre></li> <li> <p>since our docker compose file using <code>.env.dev</code> , we have to create the secret key on github repo which according snippet above is <code>secret.ENV_FILE_CONTENTS</code></p> </li> <li> <p>note <code>-T</code> in running step to avoid TTY error.</p> </li> </ol>"},{"location":"how-to-setup-ambassador/","title":"Setup ambassador edge stack","text":""},{"location":"how-to-setup-ambassador/#add-the-repo","title":"Add the Repo:","text":"<ul> <li><code>helm repo add datawire https://app.getambassador.io</code></li> <li><code>helm repo update</code></li> </ul>"},{"location":"how-to-setup-ambassador/#create-namespace-and-install","title":"Create Namespace and Install:","text":"<ul> <li><code>kubectl create namespace ambassador &amp;&amp; \\</code></li> <li><code>kubectl apply -f https://app.getambassador.io/yaml/edge-stack/3.7.2/aes-crds.yaml</code></li> <li><code>kubectl wait --timeout=90s --for=condition=available deployment emissary-apiext -n emissary-system</code></li> <li><code>helm install edge-stack --namespace ambassador datawire/edge-stack &amp;&amp; \\</code></li> <li> <p><code>kubectl -n ambassador wait --for condition=available --timeout=90s deploy -lproduct=aes</code></p> </li> <li> <p>go to Ambassador Dashboard</p> </li> <li>go to service menu</li> <li>click  add service</li> <li>name token</li> <li>save token and save to secure place</li> <li>create <code>values.yaml</code> file values.yaml<pre><code>emissary-ingress:\ncreateDefaultListeners: true\nagent:\ncloudConnectToken: \"OTIxOGY2YjQtZTEwMS00NzQxLWIwZTAtZGE3NjQ0YWE4MDU5OklrcmVwM0dGQnBFNGlrZmlSSk1IdkxYTExncndiaWtTTDVFQw==\"\nresources:\nrequests:\ncpu: \"100m\"\nmemory: \"100Mi\"\nlimit:\ncpu: \"200m\"\nmemory: \"300Mi\"\nreplicaCount: 1\n</code></pre></li> <li>run this commands  <pre><code>helm upgrade edge-stack --namespace ambassador datawire/edge-stack --values values.yaml\n</code></pre> <pre><code>kubectl -n ambassador wait --for condition=available --timeout=90s deploy -lproduct=aes\n</code></pre></li> <li>when token has been synced, we visit to the abbassador service</li> <li>we should see the list of ambassador services here</li> <li>and we can run this <code>kubectl -n ambassador get svc edge-stack</code> to get our gateway IP.</li> </ul>"},{"location":"how-to-setup-ambassador/#setup-tls","title":"Setup TLS","text":"<ul> <li>map dns by going to your domain provider that you bought </li> <li>and set up something like this <pre><code>pi.goodsstock.app       A      1 hour    139.59.221.20\n</code></pre></li> <li>run this command <pre><code>kubectl apply -f https://github.com/jetstack/cert-manager/releases/latest/download/cert-manager.crds.yaml\n</code></pre></li> <li>prepare needed files following below</li> <li><code>certificate-issuer.yaml</code> (note as I was developed <code>cert-manager.io/v1alpha2</code> not working so I kept <code>cert-manager.io/v1</code> instead) certificate-issuer.yaml<pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\nname: letsencrypt-prod\nspec:\nacme:\n# Replace this email address with your own.\n# Let's Encrypt will use this to contact you about expiring\n# certificates, and issues related to your account.\nemail: goodstockdev@gmail.com\n# ACME URL, you can use the URL for Staging environment to Issue untrusted certificates\nserver: https://acme-v02.api.letsencrypt.org/directory\nprivateKeySecretRef:\n# Secret resource that will be used to store the account's private key.\nname: issuer-account-private-key\nsolvers:\n# Define the solver to perform HTTP-01 challenge\n- http01:\ningress:\nclass: nginx\nselector: {}\n</code></pre> certificate.yaml<pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\nname: api.goodsstock.app    # Cert-manager will put the resulting Secret in the same Kubernetes \n# namespace as the Certificate. You should create the certificate in \n# whichever namespace you want to configure a Host.\nspec:\nsecretName: api.goodsstock.app  issuerRef:\n# Name of ClusterIssuer\nname: letsencrypt-prod\nkind: ClusterIssuer\ndnsNames:\n- api.goodsstock.app    </code></pre> acme-challenge.yaml<pre><code>apiVersion: getambassador.io/v2\nkind: Mapping\nmetadata:\nname: acme-challenge-mapping\nspec:\nprefix: /.well-known/acme-challenge/\nrewrite: \"\"\nservice: acme-challenge-service\n---\napiVersion: v1\nkind: Service\nmetadata:\nname: acme-challenge-service\nspec:\nports:\n- port: 80\ntargetPort: 8089\nselector:\nacme.cert-manager.io/http01-solver: \"true\"\n</code></pre> host.yaml<pre><code>apiVersion: getambassador.io/v2\nkind: Host\nmetadata:\nname: api.goodsstock.app\nspec:\nhostname: api.goodsstock.app\nacmeProvider:\nauthority: 'https://acme-v02.api.letsencrypt.org/directory'\nemail: goodstockdev@gmail.com\ntlsSecret:\nname: api.goodsstock.app # The secretName defined in your Certificate resource\n</code></pre></li> <li>run <code>kubectl apply -f ${all of above config}</code> command to apply config above</li> <li>you can use <code>k9s</code> to debug if it works<ul> <li>search host by this <code>:host</code></li> <li>search certificate by this <code>:certificates</code> </li> <li>search certificate request by this <code>:certificaterequest</code></li> </ul> </li> </ul>"},{"location":"how-to-setup-ambassador/#mapping-gateway","title":"Mapping Gateway","text":"<ul> <li>assume that you apply app config files already such as <code>deployment.yaml</code>, <code>service.yaml</code>, <code>config-map.yaml</code> and etc.</li> <li>consider the <code>service.yaml</code> file. you have to make sure this file run because gateway will be used it <pre><code>ports:\n- name: http\nport: 80\ntargetPort: 3001\n</code></pre><ul> <li>note  port:80  is needed since our gateway listen to it</li> </ul> </li> <li>go to Ambassador service page</li> <li>select the service you want to map</li> <li>input the host matching which default to <code>*</code></li> <li>input the path matching eg. <code>/tenant-service/</code></li> <li>automatic retry, rate-limit can be set here as well (which i didn\u2019t try)</li> <li>click generate mapping</li> <li>select YAML tab</li> <li>copy all of code and paste to your mapping file eg. <code>tenant-mapping.yaml</code></li> <li>run  <pre><code>kubectl apply -f tenant-mapping.yaml\n</code></pre></li> <li>and re-check on the Ambassador service console.</li> </ul>"},{"location":"kustomize/","title":"Kustomize","text":""},{"location":"kustomize/#how-to-use-kustomize-to-build-separate-environments","title":"How to use Kustomize to build separate environments","text":"<p>first of all, i stored all config files in the <code>k8s</code> folder. and let\u2019s start from the basic <code>Kustomize</code> structure - <code>base</code> - this is the blueprint folder that store all the main config file that will be overwritten later</p> <p>This file use to determine what config files are going to use kustomization.yaml<pre><code>    apiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n- deployment.yaml\n- namespace.yaml\n- config-map.yaml\n- service.yaml\n</code></pre> - <code>overlays</code> - this is the folder for storing the overridden files. we will use this folder to separate environments like <code>dev, beta, prod</code> as you seen above.     - <code>beta</code>  - this is an example separated environment folder I will create overridden file     - This file we can use many resources commands from Kustomize to override the config retrospectively current environment kustomization.yaml<pre><code>    apiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nnameSuffix: -beta\ncommonLabels:\napp: tenant-service-beta\nconfigMapGenerator:\n- behavior: replace\nenvs:\n- .env\nname: tenant-service-config\nimages:\n- name: tenant-service-image\nnewName: goodstockdev/tenant-service\nnewTag: 0.1.0-beta.6\nresources:\n- ../../base\n</code></pre>     - <code>nameSuffix</code> - will add <code>-beta</code> in every places on our resources config such as     <pre><code>    apiVersion: v1\nkind: Service\nmetadata:\nname: tenant-service &gt;&gt; wil be tenant-service-beta\nspec:\nselector:\napp: tenant-service\nports:\n- name: http\nport: 80\ntargetPort: 3001\n</code></pre>     - note if we provide configMapGenerator as line 8, don\u2019t forget to provide .env that will overwritten     - actually we can use patches to override a whole config file as below example     <pre><code>    patches:\n- path: deployment.yaml\n</code></pre>     - and we just provide the path file which in this case would be <code>deployment.yaml</code> <p> </p>     - you can take a look more details on this repo - after we provided <code>kustomize</code> config files already, we can run following commands to build or delete.  <pre><code>kustomize build beta | kubectl apply -f -\n</code></pre> - use this to delete all just build <pre><code>kustomize build beta | kubectl delete -f -\n</code></pre> - don\u2019t forget to enter to the specific environment folder we are going to build in this case would be <code>overlays-&gt;beta</code></p>"}]}